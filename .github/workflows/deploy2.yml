name:  Deploy Project

on:
    workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v1

      - name: Create Public Access Key
        run: echo "${{ secrets.EC2_PUBLIC_KEY }}" > remote-host-control.pub

      - name: Config SSH
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Clone Repo And Execute Pods
        run: |
          ssh -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            git clone https://github.com/dfbastidas/manifiestos
            kubectl apply -f manifiestos/manifiesto_nginx.yml
          EOF

      - name: Config Ingress Controller
        run: |
          ssh -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo update
            helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace
            # chequear si estÃ¡ ok continuar con el proceso:
            kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=120s
            HOST=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            sed "s/\${REPLACE_ME}/$HOST/" manifiestos/manifiesto_ingress.yml > manifiestos/ingress.yml
            kubectl apply -f manifiestos/ingress.yml
          EOF

      #- name: Install Prometheus
      # run: |
      #   ssh -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_DNS }} << 'EOF'
      #     helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

      #     helm repo update

      #     helm install prometheus prometheus-community/prometheus \
      #     --namespace prometheus \
      #     --create-namespace \
      #     --set alertmanager.persistentVolume.storageClass="gp2" \
      #     --set server.persistentVolume.storageClass="gp2"
      #
      #      kubectl get all -n prometheus
      #
      #   EOF