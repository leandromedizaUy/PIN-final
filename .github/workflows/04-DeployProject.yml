name: 04 Deploy Project

on:
  workflow_run:
    workflows: [ "03 Create EKS Cluster" ]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy_k8s_project:
    if: ${{ github.event_name == 'workflow_dispatch' || ( github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v1

      - name: Create Public Access Key
        run: echo "${{ secrets.PUBLIC_ACCESS_KEY }}" > remote-host-control.pub

      - name: Install Terraform
        env:
          TERRAFORM_VERSION: "1.10.5"
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init -input=false

      - name: Get EC2 DNS from Terraform output
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        id: get_dns
        run: |
          EC2_DNS=$(terraform output -raw remote_k8s_host_public_dns)
          echo "EC2_DNS=$EC2_DNS" >> $GITHUB_ENV
          echo "::set-output name=ec2_dns::$EC2_DNS"

      - name: Config SSH
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H $EC2_DNS >> ~/.ssh/known_hosts

      - name: Clone Repo And Execute Pods
        run: |
          ssh -i private_key.pem ${{ secrets.EC2_USER }}@${{ env.EC2_DNS }} << 'EOF'
            git clone https://github.com/dfbastidas/manifiestos
            kubectl apply -f manifiestos/manifiesto_nginx.yml
          EOF

      - name: Config Ingress Controller
        run: |
          ssh -i private_key.pem ${{ secrets.EC2_USER }}@${{ env.EC2_DNS }} << 'EOF'
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo update
            helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace
            # chequear si estÃ¡ ok continuar con el proceso:
            kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=120s
            HOST=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            sed "s/\${REPLACE_ME}/$HOST/" manifiestos/manifiesto_ingress.yml > manifiestos/ingress.yml
            kubectl apply -f manifiestos/ingress.yml
          EOF

      #- name: Install Prometheus
      # run: |
      #   ssh -i private_key.pem ${{ secrets.EC2_USER }}@${{ env.EC2_DNS }} << 'EOF'
      #     helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

      #     helm repo update

      #     helm install prometheus prometheus-community/prometheus \
      #     --namespace prometheus \
      #     --create-namespace \
      #     --set alertmanager.persistentVolume.storageClass="gp2" \
      #     --set server.persistentVolume.storageClass="gp2"
      #
      #      kubectl get all -n prometheus
      #
      #   EOF
